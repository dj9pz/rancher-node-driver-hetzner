{"version":3,"file":"hetzner-node-driver-0.1.2.umd.min.machine-config.js","mappings":"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","sources":["webpack://hetzner-node-driver-0.1.2/./hcloud.ts","webpack://hetzner-node-driver-0.1.2/./machine-config/hetzner.vue?65f5","webpack://hetzner-node-driver-0.1.2/./machine-config/hetzner.vue","webpack://hetzner-node-driver-0.1.2/./machine-config/hetzner.vue?58f4","webpack://hetzner-node-driver-0.1.2/./.shell/assets/brand/ sync ^\\.\\/.*\\/metadata\\.json$","webpack://hetzner-node-driver-0.1.2/./machine-config/hetzner.vue?435d","webpack://hetzner-node-driver-0.1.2/./machine-config/hetzner.vue?3b09"],"sourcesContent":["export interface HetznerOption {\n    // These keys will be auto-mapped by v-select\n    label: string;\n    value: string | number\n}\n\nexport class HetznerCloud {\n    private credentialId: string;\n\n    private readonly BASE_URL = '/meta/proxy/api.hetzner.cloud/v1';\n\n    constructor(credentialId: string) {\n        this.credentialId = credentialId;\n    }\n\n    public async getLocations(): Promise<HetznerOption[]> {\n        const response = await this.request('/locations');\n        return response.locations.map((location: any) => ({\n            value: location.name,\n            label: `${location.name} (${location.description})`,\n        }));\n    }\n\n    public async getServerTypes(location?: string): Promise<HetznerOption[]> {\n        const response = await this.request('/server_types?per_page=50');\n        let serverTypes = response.server_types.filter((type: any) => !type.deprecated);\n\n        if (location) {\n            serverTypes = serverTypes.filter((type: any) =>\n            type.prices.some((price: any) => price.location === location)\n            );\n        }\n\n        return serverTypes.map((type: any) => {\n            let priceLabel = '';\n            if (location) {\n                const price = type.prices.find((p: any) => p.location === location);\n                if (price) {\n                    priceLabel = `€${Number(price.price_monthly.gross).toFixed(2)}/mo, `;\n                }\n            }\n            return {\n            value: type.name,\n            label: `${type.name} (${priceLabel}${type.architecture}, ${type.cores} vCPU, ${type.memory} GB RAM, ${type.disk} GB SSD)`,\n            };\n        });\n    }\n\n    public async getImages(): Promise<HetznerOption[]> {\n        let pageNum = 1;\n        let resultArray: any[] = [];\n        let shouldContinue = true;\n        do {\n            const response = await this.request(`/images?page=${pageNum}&per_page=50`);\n            let tempArray = response.images.map((image: any) => ({\n                value: image.id,\n                label: `${image.name} (${image.architecture}) - ${image.description}`,\n            }));\n            resultArray = [...resultArray, ...tempArray];\n            pageNum++;\n            shouldContinue = response.meta.pagination.last_page >= pageNum;\n        } while (shouldContinue);\n        return resultArray;\n    }\n\n    public async getPlacementGroups(): Promise<HetznerOption[]> {\n        const response = await this.request('/placement_groups?per_page=50');\n        return response.placement_groups.map((pg: any) => ({\n            value: pg.id,\n            label: pg.name,\n        }));\n    }\n\n    public async getNetworks(): Promise<HetznerOption[]> {\n        const response = await this.request('/networks?per_page=50');\n        return response.networks.map((network: any) => ({\n            value: network.id,\n            label: `${network.name} (${network.ip_range})`,\n        }));\n    }\n\n    public async getFirewalls(): Promise<HetznerOption[]> {\n        const response = await this.request('/firewalls?per_page=50');\n        return response.firewalls.map((firewall: any) => ({\n            value: firewall.id,\n            label: firewall.name,\n        }));\n    }\n\n    public async getSshKeys(): Promise<HetznerOption[]> {\n        const response = await this.request('/ssh_keys?per_page=50');\n        return response.ssh_keys.map((key: any) => ({\n            value: key.id,\n            label: key.name,\n        }));\n    }\n\n    private async request(endpoint: string, method: string = 'GET', body?: any): Promise<any> {\n        const url = `${this.BASE_URL}${endpoint}`;\n        const headers: HeadersInit = {\n                'X-Api-CattleAuth-Header': `Bearer credID=${this.credentialId} passwordField=apiToken`,\n        }\n        if (body) {\n            headers['Content-Type'] = 'application/json';\n        }\n        const response = await fetch(url, {\n            method,\n            headers,\n            body: body ? JSON.stringify(body) : undefined,\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n    }\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createVNode as _createVNode, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"hetzner-config\" }\nconst _hoisted_2 = { class: \"mt-20 mb-20\" }\nconst _hoisted_3 = { class: \"row mt-10\" }\nconst _hoisted_4 = { class: \"col span-12\" }\nconst _hoisted_5 = { class: \"row mt-10\" }\nconst _hoisted_6 = { class: \"col span-6\" }\nconst _hoisted_7 = { class: \"col span-6\" }\nconst _hoisted_8 = { class: \"row mt-10\" }\nconst _hoisted_9 = { class: \"col span-12\" }\nconst _hoisted_10 = { class: \"mt-30 mb-20\" }\nconst _hoisted_11 = { class: \"row mt-10 vcenter\" }\nconst _hoisted_12 = { class: \"col span-6\" }\nconst _hoisted_13 = { class: \"col span-6\" }\nconst _hoisted_14 = { class: \"row mt-20\" }\nconst _hoisted_15 = { class: \"col span-4\" }\nconst _hoisted_16 = { class: \"col span-4\" }\nconst _hoisted_17 = { class: \"col span-4\" }\nconst _hoisted_18 = { class: \"row mt-20 vcenter\" }\nconst _hoisted_19 = { class: \"col span-6\" }\nconst _hoisted_20 = { class: \"col span-6\" }\nconst _hoisted_21 = { class: \"mt-30 mb-20\" }\nconst _hoisted_22 = { class: \"row mt-10\" }\nconst _hoisted_23 = { class: \"col span-12\" }\nconst _hoisted_24 = { class: \"mb-5\" }\nconst _hoisted_25 = { class: \"description mb-10\" }\nconst _hoisted_26 = { class: \"row mt-10\" }\nconst _hoisted_27 = { class: \"col span-12\" }\n\nimport { computed, nextTick, onMounted, reactive, ref, watch } from \"vue\";\nimport Loading from '@shell/components/Loading.vue';\nimport LabeledSelect from '@shell/components/form/LabeledSelect.vue';\nimport KeyValue from '@shell/components/form/KeyValue.vue';\nimport Checkbox from '@shell/rancher-components/Form/Checkbox/Checkbox.vue';\nimport YamlEditor from '@shell/components/YamlEditor.vue';\nimport { HetznerCloud, HetznerOption } from '../hcloud';\n\n\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport { defineComponent } from \"vue\";\n// import your mixin\nconst __default__ = defineComponent({\n    mixins: [CreateEditView]\n});\n\ninterface Props {\n    uuid: string,\n    cluster?: Object,\n    value: any,\n    credentialId: string,\n    provider: string,\n    disabled?: boolean,\n    busy?: boolean,\n}\n\ninterface ServerConfiguration {\n    disablePublicNetwork?: boolean,\n    disablePublicIpv4?: boolean,\n    disablePublicIpv6?: boolean,\n    usePrivateNetwork?: boolean,\n\n    sshKeyId?: number,\n    firewallIds?: number[],\n    networkIds?: number[],\n    placementGroupId?: number,\n\n    serverImage?: number,\n    serverType?: string,\n    serverLocation?: string,\n\n    additionalUserData?: string,\n\n    serverLabels?: Record<string, string>,\n}\n\ninterface HetznerOptions {\n    locations: HetznerOption[],\n    serverTypes: HetznerOption[],\n    serverImages?: HetznerOption[],\n    sshKeys?: HetznerOption[],\n    firewalls?: HetznerOption[],\n    networks?: HetznerOption[],\n    placementGroups?: HetznerOption[],\n}\n\n\nexport default /*@__PURE__*/_defineComponent({\n  ...__default__,\n  __name: 'hetzner',\n  props: {\n    uuid: {},\n    cluster: { default: () => ({}) },\n    value: {},\n    credentialId: {},\n    provider: {},\n    disabled: { type: Boolean, default: false },\n    busy: { type: Boolean, default: false }\n  },\n  emits: ['validationChanged'],\n  setup(__props: any, { emit: __emit }) {\n\nconst props = __props;\n\nconst emit = __emit;\n\nconst hetznerOptions = ref<HetznerOptions>({\n    locations: [],\n    serverTypes: [],\n    serverImages: [],\n    sshKeys: [],\n    firewalls: [],\n    networks: [],\n    placementGroups: []\n});\n\nconst serverConfiguration = reactive<ServerConfiguration>({\n    disablePublicNetwork: false,\n    disablePublicIpv4: false,\n    disablePublicIpv6: false,\n    usePrivateNetwork: false,\n    sshKeyId: undefined,\n    firewallIds: [],\n    networkIds: [],\n    placementGroupId: undefined,\n    serverImage: undefined,\n    serverType: undefined,\n    serverLocation: undefined,\n    additionalUserData: undefined,\n    serverLabels: {}\n});\nconst loadingData = ref<boolean>(true);\nconst initialLoad = ref<boolean>(true);\nconst hcloud = ref<HetznerCloud | null>(null);\nconst isValid = ref<boolean>(false);\n\nconst syncingToProps = ref<boolean>(false);\nconst syncingFromProps = ref<boolean>(false);\n\nconst isLoading = computed(() => loadingData.value || props.busy);\n\nasync function updateValue() {\n    if (isValid.value) {\n        // Apply values\n        syncingToProps.value = true;\n        props.value.serverType = serverConfiguration.serverType?.toString();\n        props.value.serverLocation = serverConfiguration.serverLocation?.toString();\n        props.value.imageId = serverConfiguration.serverImage?.toString();\n        props.value.placementGroup = serverConfiguration.placementGroupId !== undefined && serverConfiguration.placementGroupId !== null\n            ? serverConfiguration.placementGroupId.toString()\n            : undefined;\n\n        props.value.networks = serverConfiguration.networkIds?.map(id => id?.toString()) || [];\n        props.value.firewalls = serverConfiguration.firewallIds?.map(id => id?.toString()) || [];\n        props.value.existingKeyId = serverConfiguration.sshKeyId !== undefined && serverConfiguration.sshKeyId !== null\n            ? serverConfiguration.sshKeyId.toString()\n            : undefined;\n\n        props.value.usePrivateNetwork = serverConfiguration.usePrivateNetwork;\n        if (serverConfiguration.disablePublicNetwork) {\n            props.value.disablePublic = true;\n            props.value.disablePublicIpv4 = false;\n            props.value.disablePublicIpv6 = false;\n        } else {\n            props.value.disablePublic = false;\n            props.value.disablePublicIpv4 = serverConfiguration.disablePublicIpv4;\n            props.value.disablePublicIpv6 = serverConfiguration.disablePublicIpv6;\n        }\n\n        props.value.additionalUserData = serverConfiguration.additionalUserData;\n        props.value.userDataFromFile = true; // Always true, to activate loading Rancher-injected user data\n\n        props.value.serverLabel = serverConfiguration.serverLabels ? Object.entries(serverConfiguration.serverLabels).map(([key, value]) => `${key}=${value}`) : [];\n        \n        await nextTick();\n        syncingToProps.value = false;\n    }\n}\n\nwatch(() => props.value, async (newValue) => {\n    if (syncingToProps.value) return;\n\n    // Update local configuration from props value\n    syncingFromProps.value = true;\n    serverConfiguration.serverType = newValue.serverType !== undefined && newValue.serverType !== null\n        ? newValue.serverType.toString()\n        : undefined;\n\n    serverConfiguration.serverLocation = newValue.serverLocation !== undefined && newValue.serverLocation !== null\n        ? newValue.serverLocation.toString()\n        : undefined;\n\n    serverConfiguration.serverImage = newValue.imageId !== undefined && newValue.imageId !== null\n        ? (typeof newValue.imageId === 'string' ? Number(newValue.imageId) : newValue.imageId)\n        : undefined;\n\n    serverConfiguration.placementGroupId = newValue.placementGroup !== undefined && newValue.placementGroup !== null\n        ? (typeof newValue.placementGroup === 'string' ? Number(newValue.placementGroup) : newValue.placementGroup)\n        : undefined;\n\n    serverConfiguration.networkIds = Array.isArray(newValue.networks)\n        ? newValue.networks.map((id: any) => typeof id === 'string' ? Number(id) : id)\n        : [];\n\n    serverConfiguration.firewallIds = Array.isArray(newValue.firewalls)\n        ? newValue.firewalls.map((id: any) => typeof id === 'string' ? Number(id) : id)\n        : [];\n    serverConfiguration.sshKeyId = newValue.existingKeyId !== undefined && newValue.existingKeyId !== null\n        ? Number(newValue.existingKeyId)\n        : undefined;\n\n    serverConfiguration.usePrivateNetwork = newValue.usePrivateNetwork;\n    serverConfiguration.disablePublicNetwork = newValue.disablePublic;\n    serverConfiguration.disablePublicIpv4 = newValue.disablePublicIpv4;\n    serverConfiguration.disablePublicIpv6 = newValue.disablePublicIpv6;\n\n    serverConfiguration.additionalUserData = newValue.additionalUserData || '';\n    serverConfiguration.serverLabels = Object.fromEntries((newValue.serverLabel || []).map((label: string) => label.split('=')));\n    \n    await nextTick();\n    syncingFromProps.value = false;\n}, { immediate: true, deep: true });\n\nwatch(serverConfiguration, async (newValue) => {\n    let valid = true;\n    if (!newValue.serverImage || !newValue.serverType || !newValue.serverLocation) {\n        valid = false;\n    }\n    if ((newValue.disablePublicNetwork || newValue.disablePublicIpv4 || newValue.disablePublicIpv6) && !newValue.usePrivateNetwork) {\n        valid = false;\n    }\n    if (newValue.usePrivateNetwork && !newValue.networkIds?.length) {\n        valid = false;\n    }\n    isValid.value = valid;\n    emit('validationChanged', valid);\n    if (valid && !syncingFromProps.value) {\n        await updateValue();\n    }\n}, { immediate: true, deep: true });\n\nwatch(\n    () => serverConfiguration.serverLocation,\n    async (newLocation) => {\n        if (hcloud.value) {\n            loadingData.value = true;\n            try {\n                // Fetch server types based on the selected location\n                hetznerOptions.value.serverTypes = await hcloud.value.getServerTypes(newLocation);\n                // If selected server type is not available in the new location, reset it\n                if (!hetznerOptions.value.serverTypes.some(type => type.value === serverConfiguration.serverType)) {\n                    serverConfiguration.serverType = undefined;\n                }\n            } catch (error) {\n                console.error('Failed to load server types:', error);\n            } finally {\n                loadingData.value = false;\n            }\n        }\n    }\n)\n\nonMounted(async () => {\n    hcloud.value = new HetznerCloud(props.credentialId);\n\n    // Load options from Hetzner Cloud API\n    try {\n        const [\n            locations,\n            serverTypes,\n            serverImages,\n            placementGroups,\n            networks,\n            sshKeys,\n            firewalls\n        ] = await Promise.all([\n            hcloud.value.getLocations(),\n            hcloud.value.getServerTypes(),\n            hcloud.value.getImages(),\n            hcloud.value.getPlacementGroups(),\n            hcloud.value.getNetworks(),\n            hcloud.value.getSshKeys(),\n            hcloud.value.getFirewalls()\n        ]);\n        hetznerOptions.value.locations = locations;\n        hetznerOptions.value.serverTypes = serverTypes;\n        hetznerOptions.value.serverImages = serverImages;\n        hetznerOptions.value.placementGroups = placementGroups;\n        hetznerOptions.value.networks = networks;\n        hetznerOptions.value.sshKeys = sshKeys;\n        hetznerOptions.value.firewalls = firewalls;\n    } catch (error) {\n        console.error('Failed to load Hetzner data:', error);\n    }\n\n    loadingData.value = false;\n    initialLoad.value = false;\n});\n\nfunction test() {\n    updateValue();\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    (initialLoad.value)\n      ? (_openBlock(), _createBlock(Loading, {\n          key: 0,\n          delayed: true\n        }))\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"div\", _hoisted_1, [\n      _createElementVNode(\"h2\", _hoisted_2, _toDisplayString(_ctx.t('driver.hetzner.machine.server.title')), 1),\n      _createElementVNode(\"div\", _hoisted_3, [\n        _createElementVNode(\"div\", _hoisted_4, [\n          _createVNode(LabeledSelect, {\n            value: serverConfiguration.serverLocation,\n            \"onUpdate:value\": _cache[0] || (_cache[0] = ($event: any) => ((serverConfiguration.serverLocation) = $event)),\n            options: hetznerOptions.value.locations,\n            required: \"\",\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.server.location.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.server.location.label')\n          }, null, 8, [\"value\", \"options\", \"disabled\", \"loading\", \"placeholder\", \"label\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_5, [\n        _createElementVNode(\"div\", _hoisted_6, [\n          _createVNode(LabeledSelect, {\n            value: serverConfiguration.serverType,\n            \"onUpdate:value\": _cache[1] || (_cache[1] = ($event: any) => ((serverConfiguration.serverType) = $event)),\n            options: hetznerOptions.value.serverTypes,\n            required: \"\",\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.server.type.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.server.type.label')\n          }, null, 8, [\"value\", \"options\", \"disabled\", \"loading\", \"placeholder\", \"label\"])\n        ]),\n        _createElementVNode(\"div\", _hoisted_7, [\n          _createVNode(LabeledSelect, {\n            value: serverConfiguration.serverImage,\n            \"onUpdate:value\": _cache[2] || (_cache[2] = ($event: any) => ((serverConfiguration.serverImage) = $event)),\n            options: hetznerOptions.value.serverImages,\n            required: \"\",\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.server.image.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.server.image.label')\n          }, null, 8, [\"value\", \"options\", \"disabled\", \"loading\", \"placeholder\", \"label\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_8, [\n        _createElementVNode(\"div\", _hoisted_9, [\n          _createVNode(LabeledSelect, {\n            value: serverConfiguration.placementGroupId,\n            \"onUpdate:value\": _cache[3] || (_cache[3] = ($event: any) => ((serverConfiguration.placementGroupId) = $event)),\n            options: hetznerOptions.value.placementGroups,\n            clearable: \"\",\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.server.placementGroup.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.server.placementGroup.label')\n          }, null, 8, [\"value\", \"options\", \"disabled\", \"loading\", \"placeholder\", \"label\"])\n        ])\n      ]),\n      _createElementVNode(\"h2\", _hoisted_10, _toDisplayString(_ctx.t('driver.hetzner.machine.network.title')), 1),\n      _createElementVNode(\"div\", _hoisted_11, [\n        _createElementVNode(\"div\", _hoisted_12, [\n          _createVNode(LabeledSelect, {\n            value: serverConfiguration.networkIds,\n            \"onUpdate:value\": _cache[4] || (_cache[4] = ($event: any) => ((serverConfiguration.networkIds) = $event)),\n            options: hetznerOptions.value.networks,\n            multiple: \"\",\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.network.networks.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.network.networks.label')\n          }, null, 8, [\"value\", \"options\", \"disabled\", \"loading\", \"placeholder\", \"label\"])\n        ]),\n        _createElementVNode(\"div\", _hoisted_13, [\n          _createVNode(Checkbox, {\n            value: serverConfiguration.usePrivateNetwork,\n            \"onUpdate:value\": _cache[5] || (_cache[5] = ($event: any) => ((serverConfiguration.usePrivateNetwork) = $event)),\n            disabled: isLoading.value,\n            label: _ctx.t('driver.hetzner.machine.network.private.label'),\n            description: _ctx.t('driver.hetzner.machine.network.private.description')\n          }, null, 8, [\"value\", \"disabled\", \"label\", \"description\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_14, [\n        _createElementVNode(\"div\", _hoisted_15, [\n          _createVNode(Checkbox, {\n            value: serverConfiguration.disablePublicNetwork,\n            \"onUpdate:value\": _cache[6] || (_cache[6] = ($event: any) => ((serverConfiguration.disablePublicNetwork) = $event)),\n            disabled: isLoading.value || !serverConfiguration.networkIds?.length,\n            label: _ctx.t('driver.hetzner.machine.network.disablePublic.label'),\n            description: _ctx.t('driver.hetzner.machine.network.disablePublic.description')\n          }, null, 8, [\"value\", \"disabled\", \"label\", \"description\"])\n        ]),\n        _createElementVNode(\"div\", _hoisted_16, [\n          _createVNode(Checkbox, {\n            value: serverConfiguration.disablePublicIpv4,\n            \"onUpdate:value\": _cache[7] || (_cache[7] = ($event: any) => ((serverConfiguration.disablePublicIpv4) = $event)),\n            disabled: isLoading.value || serverConfiguration.disablePublicNetwork,\n            label: _ctx.t('driver.hetzner.machine.network.disableIPv4.label'),\n            description: _ctx.t('driver.hetzner.machine.network.disableIPv4.description')\n          }, null, 8, [\"value\", \"disabled\", \"label\", \"description\"])\n        ]),\n        _createElementVNode(\"div\", _hoisted_17, [\n          _createVNode(Checkbox, {\n            value: serverConfiguration.disablePublicIpv6,\n            \"onUpdate:value\": _cache[8] || (_cache[8] = ($event: any) => ((serverConfiguration.disablePublicIpv6) = $event)),\n            disabled: isLoading.value || serverConfiguration.disablePublicNetwork,\n            label: _ctx.t('driver.hetzner.machine.network.disableIPv6.label'),\n            description: _ctx.t('driver.hetzner.machine.network.disableIPv6.description')\n          }, null, 8, [\"value\", \"disabled\", \"label\", \"description\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_18, [\n        _createElementVNode(\"div\", _hoisted_19, [\n          _createVNode(LabeledSelect, {\n            value: serverConfiguration.firewallIds,\n            \"onUpdate:value\": _cache[9] || (_cache[9] = ($event: any) => ((serverConfiguration.firewallIds) = $event)),\n            options: hetznerOptions.value.firewalls,\n            multiple: \"\",\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.network.firewalls.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.network.firewalls.label')\n          }, null, 8, [\"value\", \"options\", \"disabled\", \"loading\", \"placeholder\", \"label\"])\n        ]),\n        _createElementVNode(\"div\", _hoisted_20, [\n          _createVNode(LabeledSelect, {\n            value: serverConfiguration.sshKeyId,\n            \"onUpdate:value\": _cache[10] || (_cache[10] = ($event: any) => ((serverConfiguration.sshKeyId) = $event)),\n            options: hetznerOptions.value.sshKeys,\n            clearable: \"\",\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.network.sshKey.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.network.sshKey.label')\n          }, null, 8, [\"value\", \"options\", \"disabled\", \"loading\", \"placeholder\", \"label\"])\n        ])\n      ]),\n      _createElementVNode(\"h2\", _hoisted_21, _toDisplayString(_ctx.t('driver.hetzner.machine.additionalConfig.title')), 1),\n      _createElementVNode(\"div\", _hoisted_22, [\n        _createElementVNode(\"div\", _hoisted_23, [\n          _createElementVNode(\"h3\", _hoisted_24, _toDisplayString(_ctx.t('driver.hetzner.machine.additionalConfig.userData.label')), 1),\n          _createElementVNode(\"div\", _hoisted_25, _toDisplayString(_ctx.t('driver.hetzner.machine.additionalConfig.userData.description')), 1),\n          _createVNode(YamlEditor, {\n            value: serverConfiguration.additionalUserData,\n            \"onUpdate:value\": _cache[11] || (_cache[11] = ($event: any) => ((serverConfiguration.additionalUserData) = $event)),\n            disabled: isLoading.value,\n            placeholder: _ctx.t('driver.hetzner.machine.additionalConfig.userData.placeholder'),\n            label: _ctx.t('driver.hetzner.machine.additionalConfig.userData.label'),\n            showCodeEditor: true,\n            scrolling: true\n          }, null, 8, [\"value\", \"disabled\", \"placeholder\", \"label\"])\n        ])\n      ]),\n      _createElementVNode(\"div\", _hoisted_26, [\n        _createElementVNode(\"div\", _hoisted_27, [\n          _createVNode(KeyValue, {\n            value: serverConfiguration.serverLabels,\n            \"onUpdate:value\": _cache[12] || (_cache[12] = ($event: any) => ((serverConfiguration.serverLabels) = $event)),\n            valueCanBeEmpty: true,\n            disabled: isLoading.value,\n            loading: isLoading.value,\n            title: _ctx.t('driver.hetzner.machine.additionalConfig.labels.label'),\n            \"three-columns\": false,\n            titleProtip: _ctx.t('driver.hetzner.machine.additionalConfig.labels.description')\n          }, null, 8, [\"value\", \"disabled\", \"loading\", \"title\", \"titleProtip\"])\n        ])\n      ])\n    ])\n  ]))\n}\n}\n\n})","<script setup lang=\"ts\">\nimport { computed, nextTick, onMounted, reactive, ref, watch } from \"vue\";\nimport Loading from '@shell/components/Loading.vue';\nimport LabeledSelect from '@shell/components/form/LabeledSelect.vue';\nimport KeyValue from '@shell/components/form/KeyValue.vue';\nimport Checkbox from '@shell/rancher-components/Form/Checkbox/Checkbox.vue';\nimport YamlEditor from '@shell/components/YamlEditor.vue';\nimport { HetznerCloud, HetznerOption } from '../hcloud';\n\ninterface Props {\n    uuid: string,\n    cluster?: Object,\n    value: any,\n    credentialId: string,\n    provider: string,\n    disabled?: boolean,\n    busy?: boolean,\n}\n\ninterface ServerConfiguration {\n    disablePublicNetwork?: boolean,\n    disablePublicIpv4?: boolean,\n    disablePublicIpv6?: boolean,\n    usePrivateNetwork?: boolean,\n\n    sshKeyId?: number,\n    firewallIds?: number[],\n    networkIds?: number[],\n    placementGroupId?: number,\n\n    serverImage?: number,\n    serverType?: string,\n    serverLocation?: string,\n\n    additionalUserData?: string,\n\n    serverLabels?: Record<string, string>,\n}\n\ninterface HetznerOptions {\n    locations: HetznerOption[],\n    serverTypes: HetznerOption[],\n    serverImages?: HetznerOption[],\n    sshKeys?: HetznerOption[],\n    firewalls?: HetznerOption[],\n    networks?: HetznerOption[],\n    placementGroups?: HetznerOption[],\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    cluster: () => ({}),\n    disabled: false,\n    busy: false,\n});\n\nconst emit = defineEmits(['validationChanged']);\n\nconst hetznerOptions = ref<HetznerOptions>({\n    locations: [],\n    serverTypes: [],\n    serverImages: [],\n    sshKeys: [],\n    firewalls: [],\n    networks: [],\n    placementGroups: []\n});\n\nconst serverConfiguration = reactive<ServerConfiguration>({\n    disablePublicNetwork: false,\n    disablePublicIpv4: false,\n    disablePublicIpv6: false,\n    usePrivateNetwork: false,\n    sshKeyId: undefined,\n    firewallIds: [],\n    networkIds: [],\n    placementGroupId: undefined,\n    serverImage: undefined,\n    serverType: undefined,\n    serverLocation: undefined,\n    additionalUserData: undefined,\n    serverLabels: {}\n});\nconst loadingData = ref<boolean>(true);\nconst initialLoad = ref<boolean>(true);\nconst hcloud = ref<HetznerCloud | null>(null);\nconst isValid = ref<boolean>(false);\n\nconst syncingToProps = ref<boolean>(false);\nconst syncingFromProps = ref<boolean>(false);\n\nconst isLoading = computed(() => loadingData.value || props.busy);\n\nasync function updateValue() {\n    if (isValid.value) {\n        // Apply values\n        syncingToProps.value = true;\n        props.value.serverType = serverConfiguration.serverType?.toString();\n        props.value.serverLocation = serverConfiguration.serverLocation?.toString();\n        props.value.imageId = serverConfiguration.serverImage?.toString();\n        props.value.placementGroup = serverConfiguration.placementGroupId !== undefined && serverConfiguration.placementGroupId !== null\n            ? serverConfiguration.placementGroupId.toString()\n            : undefined;\n\n        props.value.networks = serverConfiguration.networkIds?.map(id => id?.toString()) || [];\n        props.value.firewalls = serverConfiguration.firewallIds?.map(id => id?.toString()) || [];\n        props.value.existingKeyId = serverConfiguration.sshKeyId !== undefined && serverConfiguration.sshKeyId !== null\n            ? serverConfiguration.sshKeyId.toString()\n            : undefined;\n\n        props.value.usePrivateNetwork = serverConfiguration.usePrivateNetwork;\n        if (serverConfiguration.disablePublicNetwork) {\n            props.value.disablePublic = true;\n            props.value.disablePublicIpv4 = false;\n            props.value.disablePublicIpv6 = false;\n        } else {\n            props.value.disablePublic = false;\n            props.value.disablePublicIpv4 = serverConfiguration.disablePublicIpv4;\n            props.value.disablePublicIpv6 = serverConfiguration.disablePublicIpv6;\n        }\n\n        props.value.additionalUserData = serverConfiguration.additionalUserData;\n        props.value.userDataFromFile = true; // Always true, to activate loading Rancher-injected user data\n\n        props.value.serverLabel = serverConfiguration.serverLabels ? Object.entries(serverConfiguration.serverLabels).map(([key, value]) => `${key}=${value}`) : [];\n        \n        await nextTick();\n        syncingToProps.value = false;\n    }\n}\n\nwatch(() => props.value, async (newValue) => {\n    if (syncingToProps.value) return;\n\n    // Update local configuration from props value\n    syncingFromProps.value = true;\n    serverConfiguration.serverType = newValue.serverType !== undefined && newValue.serverType !== null\n        ? newValue.serverType.toString()\n        : undefined;\n\n    serverConfiguration.serverLocation = newValue.serverLocation !== undefined && newValue.serverLocation !== null\n        ? newValue.serverLocation.toString()\n        : undefined;\n\n    serverConfiguration.serverImage = newValue.imageId !== undefined && newValue.imageId !== null\n        ? (typeof newValue.imageId === 'string' ? Number(newValue.imageId) : newValue.imageId)\n        : undefined;\n\n    serverConfiguration.placementGroupId = newValue.placementGroup !== undefined && newValue.placementGroup !== null\n        ? (typeof newValue.placementGroup === 'string' ? Number(newValue.placementGroup) : newValue.placementGroup)\n        : undefined;\n\n    serverConfiguration.networkIds = Array.isArray(newValue.networks)\n        ? newValue.networks.map((id: any) => typeof id === 'string' ? Number(id) : id)\n        : [];\n\n    serverConfiguration.firewallIds = Array.isArray(newValue.firewalls)\n        ? newValue.firewalls.map((id: any) => typeof id === 'string' ? Number(id) : id)\n        : [];\n    serverConfiguration.sshKeyId = newValue.existingKeyId !== undefined && newValue.existingKeyId !== null\n        ? Number(newValue.existingKeyId)\n        : undefined;\n\n    serverConfiguration.usePrivateNetwork = newValue.usePrivateNetwork;\n    serverConfiguration.disablePublicNetwork = newValue.disablePublic;\n    serverConfiguration.disablePublicIpv4 = newValue.disablePublicIpv4;\n    serverConfiguration.disablePublicIpv6 = newValue.disablePublicIpv6;\n\n    serverConfiguration.additionalUserData = newValue.additionalUserData || '';\n    serverConfiguration.serverLabels = Object.fromEntries((newValue.serverLabel || []).map((label: string) => label.split('=')));\n    \n    await nextTick();\n    syncingFromProps.value = false;\n}, { immediate: true, deep: true });\n\nwatch(serverConfiguration, async (newValue) => {\n    let valid = true;\n    if (!newValue.serverImage || !newValue.serverType || !newValue.serverLocation) {\n        valid = false;\n    }\n    if ((newValue.disablePublicNetwork || newValue.disablePublicIpv4 || newValue.disablePublicIpv6) && !newValue.usePrivateNetwork) {\n        valid = false;\n    }\n    if (newValue.usePrivateNetwork && !newValue.networkIds?.length) {\n        valid = false;\n    }\n    isValid.value = valid;\n    emit('validationChanged', valid);\n    if (valid && !syncingFromProps.value) {\n        await updateValue();\n    }\n}, { immediate: true, deep: true });\n\nwatch(\n    () => serverConfiguration.serverLocation,\n    async (newLocation) => {\n        if (hcloud.value) {\n            loadingData.value = true;\n            try {\n                // Fetch server types based on the selected location\n                hetznerOptions.value.serverTypes = await hcloud.value.getServerTypes(newLocation);\n                // If selected server type is not available in the new location, reset it\n                if (!hetznerOptions.value.serverTypes.some(type => type.value === serverConfiguration.serverType)) {\n                    serverConfiguration.serverType = undefined;\n                }\n            } catch (error) {\n                console.error('Failed to load server types:', error);\n            } finally {\n                loadingData.value = false;\n            }\n        }\n    }\n)\n\nonMounted(async () => {\n    hcloud.value = new HetznerCloud(props.credentialId);\n\n    // Load options from Hetzner Cloud API\n    try {\n        const [\n            locations,\n            serverTypes,\n            serverImages,\n            placementGroups,\n            networks,\n            sshKeys,\n            firewalls\n        ] = await Promise.all([\n            hcloud.value.getLocations(),\n            hcloud.value.getServerTypes(),\n            hcloud.value.getImages(),\n            hcloud.value.getPlacementGroups(),\n            hcloud.value.getNetworks(),\n            hcloud.value.getSshKeys(),\n            hcloud.value.getFirewalls()\n        ]);\n        hetznerOptions.value.locations = locations;\n        hetznerOptions.value.serverTypes = serverTypes;\n        hetznerOptions.value.serverImages = serverImages;\n        hetznerOptions.value.placementGroups = placementGroups;\n        hetznerOptions.value.networks = networks;\n        hetznerOptions.value.sshKeys = sshKeys;\n        hetznerOptions.value.firewalls = firewalls;\n    } catch (error) {\n        console.error('Failed to load Hetzner data:', error);\n    }\n\n    loadingData.value = false;\n    initialLoad.value = false;\n});\n\nfunction test() {\n    updateValue();\n}\n</script>\n\n<script lang=\"ts\">\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport { defineComponent } from \"vue\";\n// import your mixin\nexport default defineComponent({\n    mixins: [CreateEditView]\n});\n</script>\n\n<template>\n    <div>\n        <Loading v-if=\"initialLoad\" :delayed=\"true\" />\n        <div class=\"hetzner-config\">\n            <h2 class=\"mt-20 mb-20\">{{ t('driver.hetzner.machine.server.title') }}</h2>\n            <div class=\"row mt-10\">\n                <div class=\"col span-12\">\n                    <LabeledSelect v-model:value=\"serverConfiguration.serverLocation\"\n                        :options=\"hetznerOptions.locations\" required :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.server.location.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.server.location.label')\" />\n                </div>\n            </div>\n            <div class=\"row mt-10\">\n                <div class=\"col span-6\">\n                    <LabeledSelect v-model:value=\"serverConfiguration.serverType\" :options=\"hetznerOptions.serverTypes\"\n                        required :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.server.type.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.server.type.label')\" />\n                </div>\n                <div class=\"col span-6\">\n                    <LabeledSelect v-model:value=\"serverConfiguration.serverImage\"\n                        :options=\"hetznerOptions.serverImages\" required :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.server.image.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.server.image.label')\" />\n                </div>\n            </div>\n            <div class=\"row mt-10\">\n                <div class=\"col span-12\">\n                    <LabeledSelect v-model:value=\"serverConfiguration.placementGroupId\"\n                        :options=\"hetznerOptions.placementGroups\" clearable :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.server.placementGroup.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.server.placementGroup.label')\" />\n                </div>\n            </div>\n            <h2 class=\"mt-30 mb-20\">{{ t('driver.hetzner.machine.network.title') }}</h2>\n            <div class=\"row mt-10 vcenter\">\n                <div class=\"col span-6\">\n                    <LabeledSelect v-model:value=\"serverConfiguration.networkIds\" :options=\"hetznerOptions.networks\"\n                        multiple :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.network.networks.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.network.networks.label')\" />\n                </div>\n                <div class=\"col span-6\">\n                    <Checkbox v-model:value=\"serverConfiguration.usePrivateNetwork\" :disabled=\"isLoading\"\n                        :label=\"t('driver.hetzner.machine.network.private.label')\"\n                        :description=\"t('driver.hetzner.machine.network.private.description')\" />\n                </div>\n            </div>\n            <div class=\"row mt-20\">\n                <div class=\"col span-4\">\n                    <Checkbox v-model:value=\"serverConfiguration.disablePublicNetwork\"\n                        :disabled=\"isLoading || !serverConfiguration.networkIds?.length\"\n                        :label=\"t('driver.hetzner.machine.network.disablePublic.label')\"\n                        :description=\"t('driver.hetzner.machine.network.disablePublic.description')\" />\n                </div>\n                <div class=\"col span-4\">\n                    <Checkbox v-model:value=\"serverConfiguration.disablePublicIpv4\"\n                        :disabled=\"isLoading || serverConfiguration.disablePublicNetwork\"\n                        :label=\"t('driver.hetzner.machine.network.disableIPv4.label')\"\n                        :description=\"t('driver.hetzner.machine.network.disableIPv4.description')\" />\n                </div>\n                <div class=\"col span-4\">\n                    <Checkbox v-model:value=\"serverConfiguration.disablePublicIpv6\"\n                        :disabled=\"isLoading || serverConfiguration.disablePublicNetwork\"\n                        :label=\"t('driver.hetzner.machine.network.disableIPv6.label')\"\n                        :description=\"t('driver.hetzner.machine.network.disableIPv6.description')\" />\n                </div>\n            </div>\n            <div class=\"row mt-20 vcenter\">\n                <div class=\"col span-6\">\n                    <LabeledSelect v-model:value=\"serverConfiguration.firewallIds\" :options=\"hetznerOptions.firewalls\"\n                        multiple :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.network.firewalls.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.network.firewalls.label')\" />\n                </div>\n                <div class=\"col span-6\">\n                    <LabeledSelect v-model:value=\"serverConfiguration.sshKeyId\" :options=\"hetznerOptions.sshKeys\"\n                        clearable :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.network.sshKey.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.network.sshKey.label')\" />\n                </div>\n            </div>\n            <h2 class=\"mt-30 mb-20\">{{ t('driver.hetzner.machine.additionalConfig.title') }}</h2>\n            <div class=\"row mt-10\">\n                <div class=\"col span-12\">\n                    <h3 class=\"mb-5\">{{ t('driver.hetzner.machine.additionalConfig.userData.label') }}</h3>\n                    <div class=\"description mb-10\">\n                        {{ t('driver.hetzner.machine.additionalConfig.userData.description') }}\n                    </div>\n                    <YamlEditor v-model:value=\"serverConfiguration.additionalUserData\" :disabled=\"isLoading\"\n                        :placeholder=\"t('driver.hetzner.machine.additionalConfig.userData.placeholder')\"\n                        :label=\"t('driver.hetzner.machine.additionalConfig.userData.label')\" :showCodeEditor=\"true\"\n                        :scrolling=\"true\" />\n                </div>\n            </div>\n            <div class=\"row mt-10\">\n                <div class=\"col span-12\">\n                    <KeyValue v-model:value=\"serverConfiguration.serverLabels\" :valueCanBeEmpty=\"true\"\n                        :disabled=\"isLoading\" :loading=\"isLoading\"\n                        :title=\"t('driver.hetzner.machine.additionalConfig.labels.label')\" :three-columns=\"false\"\n                        :titleProtip=\"t('driver.hetzner.machine.additionalConfig.labels.description')\" />\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<style scoped lang=\"scss\">\n.hetzner-config {\n    .row.vcenter {\n        align-items: center;\n    }\n\n    .description {\n        font-size: 0.9rem;\n        color: var(--input-label);\n    }\n}\n</style>","import script from \"./hetzner.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./hetzner.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./hetzner.vue?vue&type=style&index=0&id=4afdca13&scoped=true&lang=scss\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4afdca13\"]])\n\nexport default __exports__","var map = {\n\t\"./csp/metadata.json\": 6471,\n\t\"./federal/metadata.json\": 1862,\n\t\"./harvester/metadata.json\": 1507,\n\t\"./rgs/metadata.json\": 8401,\n\t\"./suse/metadata.json\": 7259\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1177;","// Imports\nimport ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/noSourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".hetzner-config .row.vcenter[data-v-4afdca13]{align-items:center}.hetzner-config .description[data-v-4afdca13]{font-size:.9rem;color:var(--input-label)}\", \"\"]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-23.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-23.use[2]!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-23.use[3]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-23.use[4]!../../../node_modules/cache-loader/dist/cjs.js??ruleSet[0].use[0]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./hetzner.vue?vue&type=style&index=0&id=4afdca13&scoped=true&lang=scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"27da406b\", content, true, {\"sourceMap\":false,\"shadowMode\":false});"],"names":["HetznerCloud","constructor","credentialId","_defineProperty","this","getLocations","response","request","locations","map","location","value","name","label","description","getServerTypes","serverTypes","server_types","filter","type","deprecated","prices","some","price","priceLabel","find","p","Number","price_monthly","gross","toFixed","architecture","cores","memory","disk","getImages","pageNum","resultArray","shouldContinue","tempArray","images","image","id","meta","pagination","last_page","getPlacementGroups","placement_groups","pg","getNetworks","networks","network","ip_range","getFirewalls","firewalls","firewall","getSshKeys","ssh_keys","key","endpoint","method","body","url","BASE_URL","headers","fetch","JSON","stringify","undefined","ok","Error","status","json","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","__default__","defineComponent","mixins","CreateEditView","_defineComponent","__name","props","uuid","cluster","default","provider","disabled","Boolean","busy","emits","setup","__props","emit","__emit","hetznerOptions","ref","serverImages","sshKeys","placementGroups","serverConfiguration","reactive","disablePublicNetwork","disablePublicIpv4","disablePublicIpv6","usePrivateNetwork","sshKeyId","firewallIds","networkIds","placementGroupId","serverImage","serverType","serverLocation","additionalUserData","serverLabels","loadingData","initialLoad","hcloud","isValid","syncingToProps","syncingFromProps","isLoading","computed","async","updateValue","toString","imageId","placementGroup","existingKeyId","disablePublic","userDataFromFile","serverLabel","Object","entries","nextTick","watch","newValue","Array","isArray","fromEntries","split","immediate","deep","valid","length","newLocation","error","console","onMounted","Promise","all","_ctx","_cache","_openBlock","_createElementBlock","_createBlock","Loading","delayed","_createCommentVNode","_createElementVNode","_toDisplayString","t","_createVNode","LabeledSelect","$event","options","required","loading","placeholder","clearable","multiple","Checkbox","YamlEditor","showCodeEditor","scrolling","KeyValue","valueCanBeEmpty","title","titleProtip","__exports__","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","resolve","module","exports","___CSS_LOADER_EXPORT___","push","content","__esModule","locals","add"],"sourceRoot":""}